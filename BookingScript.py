import importlib
try:
    importlib.import_module('selenium')
except ImportError:
    import pip
    pip.main(['install', 'selenium'])

from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time, os, sys, subprocess
import datetime
import ReadFile

def main():
    try:
        dic = ReadFile.readFile(path+'\\_BookingInfo.txt')
        pagelink = dic['Webpage']
        utorid = dic['UTORid']
        password = dic['Password']
        AutoReload = dic['AutoReload']
        AutoStart = dic['AutoStart']
        dic = ReadFile.readFile(path+'\\_ConfirmBookingTime.txt')
        target_date = dic['BookingDate']
        target_time = dic['BookingTime']
        StartTime = dic['StartTime']
        ConfirmBooking = dic['ConfirmBooking']
    except Exception as e:
        outputError(str(e))

    driver.get(pagelink)    # open webpage
    action = ActionChains(driver)   # make page clickable
    wait = WebDriverWait(driver, 30) # setup wait timer

    refresh_time = datetime.datetime(StartTime[0],StartTime[1],StartTime[2],StartTime[3],StartTime[4]) - datetime.timedelta(days=2)
    cur_time = datetime.datetime.now()  # make sure it is at most 5 minutes early
    diff = refresh_time - cur_time
    if diff > datetime.timedelta(minutes=5):
        outputError("OPEN_TOO_EARLY",warning=True)
        time.sleep(diff.seconds)

    try:    # click login button
        wait.until(EC.element_to_be_clickable((By.ID, 'loginLink'))).click()
        wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@title='UTORid login for faculty, staff and students']"))).click()
    except:
        outputError('UNABLE_TO_FIND_LOGIN_BUTTON')

    try:    # type login credential and attempt login
        wait.until(EC.presence_of_element_located((By.ID, 'username'))).send_keys(utorid)
        wait.until(EC.presence_of_element_located((By.ID, 'password'))).send_keys(password)
        wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@name='_eventId_proceed']"))).click()
    except:
        outputError('LOGIN_BUTTON_ERROR')
    try:    # if the password incorrect error is seen, show this error msg
        WebDriverWait(driver,1).until(EC.presence_of_element_located((By.XPATH, "//p[@class='form-element form-error']")))
        outputError('LOGIN_CREDENTIAL_ERROR')
    except:
        pass

    cur_time = datetime.datetime.now()
    while cur_time - refresh_time < datetime.timedelta(0):
        cur_time = datetime.datetime.now()
    driver.refresh()

    try:    # attempt to obtain the card with specified time
        card = wait.until(EC.presence_of_element_located((By.XPATH, "//div[@data-instance-dates='"+target_date+"'and @data-instance-times='"+target_time+"']")))
    except:
        try:    # try again
            driver.refresh()
            card = wait.until(EC.presence_of_element_located((By.XPATH, "//div[@data-instance-dates='"+target_date+"'and @data-instance-times='"+target_time+"']")))
        except:
            outputError('DATE_TIME_ERROR')

    try:    # click the register button
        card.find_element_by_xpath(".//button").click()
    except:
        outputError('EVENT_NOT_AVAILABLE')

    try:
        wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@id='btnAccept']")))
        wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@id='btnAccept']"))).click()
        if ConfirmBooking:
            wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@id='checkoutButton']")))
            wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@id='checkoutButton']"))).ckick()  #will acctually checkout!
    except:
        outputError('UNABLE_TO_FINISH_TRANSACTION')

    # finished!
    #driver.quit()

    if AutoReload:
        ReadFile.reloadFile(path+'\\_ConfirmBookingTime.txt',dic)
        if AutoStart:
            setupTaskScheduler(refresh_time+datetime.timedelta(days=7))

def setupTaskScheduler(StartTime=None):
    if StartTime == None:
        dic = ReadFile.readFile('_ConfirmBookingTime.txt')
        StartTime = dic['StartTime']
        StartTime = datetime.datetime(StartTime[0],StartTime[1],StartTime[2],StartTime[3],StartTime[4])- datetime.timedelta(days=2)
    runTime = StartTime-datetime.timedelta(minutes=2)
    voidTime = StartTime+datetime.timedelta(minutes=3)
    batCMD = 'schtasks /create /tn UTCB_'+StartTime.strftime('%Y%m%d%H%M')+' /tr %0\\..\\Run.bat /sc monthly /st '+runTime.strftime('%H:%M')+' /d '+StartTime.strftime('%d')+' /sd '+StartTime.strftime('%Y/%m/%d')+' /ed '+StartTime.strftime('%Y/%m/%d')+' /et '+voidTime.strftime('%H:%M')+' /ri 0 /z'

    f = open(path+'\\UTCB_add_task_autogenerated.bat','x')
    f.write(batCMD)
    f.close()
    exec("subprocess.call([r'"+path+"\\UTCB_add_task_autogenerated.bat'])")
    os.remove(path+"\\UTCB_add_task_autogenerated.bat")
    sys.exit()

def outputError(errorCode, warning=False):
    ReadFile.outputError(errorCode,warning)
    if not warning:
        pass
        #driver.quit()
        sys.exit()

if __name__ == "__main__":
    path = str(os.path.dirname(os.path.realpath(__file__)))
    args = sys.argv
    if len(args)>1 and args[1] == 'setupTaskScheduler':
        globals()[args[1]]()
    driver = webdriver.Chrome(path+'\\chromedriver.exe')
    main()